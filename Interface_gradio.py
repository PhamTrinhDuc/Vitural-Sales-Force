import gradio as gr
from source.generate.gradio_chat import chat_with_history
from PIL import Image
import requests
from io import BytesIO
import random

# H√†m reset l·∫°i cu·ªôc tr√≤ chuy·ªán
def reset_conversation():
    return [("", "Ch√†o m·ª´ng anh/ch·ªã ƒë·∫øn v·ªõi VCC! Em l√† Ph∆∞∆°ng Nhi, lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ v√† t∆∞ v·∫•n mua s·∫Øm. C√≥ ph·∫£i anh ch·ªã ƒëang c√≥ nhu c·∫ßu t√¨m hi·ªÉu v√† mua s·∫Øm ph·∫£i kh√¥ng? V·∫≠y h√£y cho em bi·∫øt m√¨nh c·∫ßn t√¨m lo·∫°i n√†o v√† v·ªõi ng√¢n s√°ch bao nhi√™u ·∫°! Ch√∫c anh/ch·ªã m·ªôt ng√†y r·ª±c r·ª° v√† th√†nh c√¥ng! üåà")], []

# H√†m t·∫£i h√¨nh ·∫£nh t·ª´ URL
def load_image(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        img = Image.open(BytesIO(response.content))
        return img
    except requests.exceptions.RequestException as e:
        print(f"Error loading image: {e}")
        return None

# Danh s√°ch c√°c URL ·∫£nh s·∫£n ph·∫©m
image_urls = [
    "https://bizweb.dktcdn.net/thumb/1024x1024/100/431/725/products/1-a3117c0b-55ff-4efd-b2bd-ec4ef2e86b56-99738266-1a91-458d-81c7-de7ea010b0d6.jpg?v=1686110787373", 
    "https://tragopacs.com/www/thumbs/thumb_6553de64e7f23_resize_700_700.jpg",
    "https://dienmaybaominh.vn/wp-content/uploads/2024/04/dieu-hoa-mdv-mdvg-10crdn8.jpg",
    "https://dienmayhungthinh.vn/wp-content/uploads/2023/06/auto-draft-86-444x296.jpg",
    "https://mdvvn.com/thumbs/400x300x1/upload/product/270x270-xtremeheat-8253.png",
    "https://bizweb.dktcdn.net/thumb/1024x1024/100/255/442/products/mdv-mdvf-10crn8.jpg?v=1689067021920",
    "https://bizweb.dktcdn.net/thumb/1024x1024/100/255/442/products/vsica-12civ.png?v=1622694889237",
]

# H√¨nh ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c h√¨nh t·ª´ URL
default_image = Image.new('RGB', (300, 300), color = (255, 255, 255))

# H√†m l·∫•y ·∫£nh ng·∫´u nhi√™n
def get_random_images():
    selected_urls = random.sample(image_urls, min(len(image_urls), 4))
    images = [load_image(url) for url in selected_urls]
    
    # ƒê·∫£m b·∫£o lu√¥n c√≥ ƒë·ªß 4 ·∫£nh, n·∫øu thi·∫øu ·∫£nh th√¨ d√πng ·∫£nh m·∫∑c ƒë·ªãnh
    while len(images) < 4:
        images.append(default_image)
    
    return images[:4]  # Tr·∫£ v·ªÅ ƒë√∫ng 4 ·∫£nh

# Giao di·ªán Gradio
with gr.Blocks(css="""
    #chatbot { 
        height: 100%; 
        overflow-y: auto; 
        border: 1px solid #ddd; 
        border-radius: 15px; 
        padding: 20px;
        background-color: #f7f7f7;
    }
    #chatbot .user, #chatbot .bot { 
        padding: 10px 15px; 
        border-radius: 20px; 
        display: inline-block;
    }
    #chatbot .user { 
        background-color: #FF6347; 
        color: black;
        float: right;
    }
    #chatbot .bot { 
        background-color: #F0F8FF; 
        color: black;
        float: left;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    #chat-header {
        text-align: center;
        padding: 20px;
        background-color: #FF6347;
        color: white;
        border-radius: 15px 15px 0 0;
        margin-bottom: 20px;
    }
    #msg-box {
        border-radius: 20px;
        border: 1px solid #ddd;
    }
    #send-btn, #reset-btn, #clear-btn {
        border-radius: 20px;
    }
    .button-row {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }
""") as demo:
    gr.HTML("""
    <div id="chat-header">
        <h1 style="color: #000000">üí¨ Chat v·ªõi AI Assistant</h1>
        <p style="color: #000000">H√£y ƒë·∫∑t c√¢u h·ªèi, t√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi b·∫°n!</p>
    </div>
    """)

    # Giao di·ªán chatbot
    chatbot = gr.Chatbot(
        [("", "Ch√†o m·ª´ng anh/ch·ªã ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i Viettel. Em l√† Ph∆∞∆°ng Nhi, tr·ª£ l√Ω t∆∞ v·∫•n b√°n h√†ng t·∫°i VCC lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ v√† t∆∞ v·∫•n mua s·∫Øm. C√≥ ph·∫£i anh ch·ªã ƒëang c√≥ nhu c·∫ßu t√¨m hi·ªÉu, mua s·∫Øm ph·∫£i kh√¥ng? V·∫≠y h√£y cho em bi·∫øt m√¨nh c·∫ßn t√¨m s·∫£n ph·∫©m n√†o v√† v·ªõi ng√¢n s√°ch bao nhi√™u ·∫°! Ch√∫c anh/ch·ªã m·ªôt ng√†y r·ª±c r·ª° v√† th√†nh c√¥ng! üåà")],
        elem_id="chatbot",
        bubble_full_width=False,
        avatar_images=("static/avt_user.png", "static/avt_bot.png"),
    )

    # Khu v·ª±c nh·∫≠p tin nh·∫Øn v√† n√∫t g·ª≠i
    with gr.Row():
        txt = gr.Textbox(
            show_label=False,
            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n ·ªü ƒë√¢y...",
            elem_id="msg-box"
        )
        submit_btn = gr.Button("G·ª≠i", elem_id="send-btn")

    # X·ª≠ l√Ω khi g·ª≠i tin nh·∫Øn
    txt.submit(chat_with_history, [txt, chatbot], [txt, chatbot])
    submit_btn.click(chat_with_history, [txt, chatbot], [txt, chatbot])

    # N√∫t x√≥a v√† reset cu·ªôc tr√≤ chuy·ªán
    with gr.Row(elem_classes="button-row"):
        clear = gr.Button("X√≥a tin nh·∫Øn", elem_id="clear-btn")
        reset = gr.Button("Reset cu·ªôc tr√≤ chuy·ªán", elem_id="reset-btn")

    clear.click(lambda: None, None, chatbot, queue=False)
    reset.click(reset_conversation, outputs=[chatbot, txt])

    # Khu v·ª±c hi·ªÉn th·ªã ·∫£nh s·∫£n ph·∫©m
    with gr.Row():
        show_images_btn = gr.Button("Xem ·∫£nh s·∫£n ph·∫©m", elem_id="view-images-btn")
    
    with gr.Row():
        image1 = gr.Image(type="pil", label="H√¨nh ·∫£nh s·∫£n ph·∫©m 1", width=300, height=300)
        image2 = gr.Image(type="pil", label="H√¨nh ·∫£nh s·∫£n ph·∫©m 2", width=300, height=300)
        image3 = gr.Image(type="pil", label="H√¨nh ·∫£nh s·∫£n ph·∫©m 3", width=300, height=300)
        image4 = gr.Image(type="pil", label="H√¨nh ·∫£nh s·∫£n ph·∫©m 4", width=300, height=300)

    # H√†m c·∫≠p nh·∫≠t h√¨nh ·∫£nh
    def update_images():
        return get_random_images()

    # X·ª≠ l√Ω khi nh·∫•n n√∫t xem ·∫£nh
    show_images_btn.click(update_images, outputs=[image1, image2, image3, image4])

# Ch·∫°y ·ª©ng d·ª•ng Gradio
demo.launch(share=True)
